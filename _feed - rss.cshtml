@using Dynlist = System.Collections.Generic.IEnumerable<dynamic>;
@using System;
@using ToSic.Razor.Blade;
<?xml version="1.0" encoding="utf-8"?>
@{
    // get all posts as delived from the standard query
    var episodes = (Content.Parents("Episode") as Dynlist).OrderByDescending(e => e.Date);

	/*  Just a note to anybody editing this file
	    The @Html.Raw("<link>") is necessary, because otherwise the
	    <link> tag gets parsed by Razor in an attempt to do something
	*/

    // get protocol and host to complete the urls of the episodes and the one of the image
    var urlHostPath = Link.To().Substring(Link.To().IndexOf("//") + 2);
    var urlHost = urlHostPath.Substring(0, urlHostPath.IndexOf("/"));
    var urlProtocol = Link.To().Substring(0, Link.To().IndexOf("//") + 2);
    var urlProtocolHost = urlProtocol + urlHost;
}

@if(Request.QueryString["standalone"] == "true")
{
  var imageUrl = urlProtocolHost + Content.Image + "?w=3000&h=3000"; // 3000 x 3000 is a apple requirement
  var licenseItems = Content.License as Dynlist;
  var licenseLink = licenseItems.Any() ? licenseItems.First().Link : "";
  var ownerItems = Content.Owner as Dynlist;
  var ownerFullName = ownerItems.Any() ? ownerItems.First().FullName : "";
  var ownerEmail = ownerItems.Any() ? ownerItems.First().Email : "";
  var managingEditor = ownerItems.Any() ? ownerItems.First().Email + " (" + ownerFullName + ")" : "";
  var copyrightYear = episodes.Last().Date.Year == episodes.First().Date.Year ? episodes.First().Date.Year : episodes.Last().Date.Year + "-" + episodes.First().Date.Year; // results in e.g. 2019 or 2017-2019
  var copyrightNotice = licenseLink != "copyright/" ? "Copyright © " + copyrightYear + " " + ownerFullName + " (" + licenseLink + ")" : "Copyright © " + copyrightYear + " " + ownerFullName;
  var categoryItems = Content.Category as Dynlist;
  var fullCategory = categoryItems.Any() ? categoryItems.First().Value : "";
  var mainCategoryName = fullCategory.IndexOf("-") > 0 ? fullCategory.Substring(0, fullCategory.IndexOf("-") - 1) : "";
  var mainCategoryLength = mainCategoryName.Length + 3;
  var categoryName = Text.Has(mainCategoryName) ? fullCategory.Substring(mainCategoryLength, (fullCategory.Length - mainCategoryLength)) : fullCategory;
  // check whether any episode is explicit because iTunes needs this information on channel level
  var isChannelExplicit = false;
  foreach(var e in episodes) {
    if(e.Explicit){
      isChannelExplicit = true;
      break;
    }
  }
  var atomLink = Link.To(parameters: "rss/true/channelid/" + Content.EntityId + "/standalone/true");
  @:<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:creativeCommons="http://backend.userland.com/creativeCommonsRssModule">
    @:<channel>
      @Tag.Custom("title", Content.Title)
      @Html.Raw("<link>" + Link.To() + "</link>")
      @Tag.Custom("image",
        Tag.Custom("title", Content.Title),
        Tag.Custom("url", imageUrl),
        Tag.Custom("link", Link.To())
      )
      @:<itunes:image href="@imageUrl"/>
      @:<description>@Tags.Strip(Content.Description)</description>
      @:<itunes:summary>@Tags.Strip(Content.Description)</itunes:summary>
      @Tag.Custom("language", Content.Language)
      @Tag.Custom("copyright", copyrightNotice)
      if(licenseLink != "copyright/")
      {
        @:<creativeCommons:license>@licenseLink</creativeCommons:license>
      }
      @Tag.Custom("managingEditor", ownerEmail + " (" + ownerFullName + ")")
      @Tag.Custom("itunes:owner",
        Tag.Custom("itunes:name", ownerFullName),
        Tag.Custom("itunes:email", ownerEmail)
      )
      @Tag.Custom("itunes:author", ownerFullName)

      if(Text.Has(mainCategoryName))
      {
      @:<itunes:category text="@mainCategoryName">
        @:<itunes:category text="@categoryName"/>
      @:</itunes:category>
      } else {
      @:<itunes:category text="@categoryName"/>
      }
      @:<itunes:explicit>@isChannelExplicit</itunes:explicit>
      @:<atom:link href="@atomLink" rel="self" type="application/rss+xml" />
      @Tag.Custom("generator", "2sxc PodCast App")
      foreach(var episode in episodes)
      {
        var publicationDate = (episode.Date ?? DateTime.Now).ToString("R");
        var episodeUrl = urlProtocolHost + episode.Audio;
        var authorItems = episode.Author as Dynlist;
        var authorFullName = authorItems.Any() ? authorItems.First().FullName : "";
        var authorEmail = authorItems.Any() ? authorItems.First().Email : "";
        var duration = TimeSpan.FromMinutes(decimal.ToDouble(episode.Duration ?? 0)).ToString("hh\\:mm") + ":00";
        @:<item>
          @:<title>@episode.Title</title>
          @:<itunes:subtitle>@Tags.Strip(episode.Description)</itunes:subtitle>
          @:<description>@Tags.Strip(episode.Description)</description>
          @:<itunes:summary>@Tags.Strip(episode.Description)</itunes:summary>
          @:<pubDate>@publicationDate</pubDate>
          @:<enclosure url="@episodeUrl" type="audio/mpeg" length="1024"></enclosure>
          @:<guid isPermaLink="false">@episode.EntityGuid.ToString()</guid>
          @:<category>@categoryName</category>
          @Tag.Custom("author", authorEmail + " (" + authorFullName + ")")
          @:<itunes:author>@authorFullName</itunes:author>
          @:<itunes:duration>@duration</itunes:duration>
          @:<itunes:explicit>@episode.Explicit</itunes:explicit>
          @Tag.Custom("link", Link.To())
        @:</item>
      }
    @:</channel>
  @:</rss>
}
else
{
  @:<span>you are seeing this because you are currently viewing a normal page. to use this feed correctly, you must add ?standalone=true to the url, so it doesn't show dnn stuff or html. note that you can put the feed on an own page and then link to it <a href="@Link.To(parameters: "standalone=true")" target="_blank">(with ?standalone=true)</a> or you can also auto-use it by using the normal blog-page and where you would usually see things like /tag/something replace with /feed/all?standalone=true
  @Content.Toolbar
  @:</span>
}