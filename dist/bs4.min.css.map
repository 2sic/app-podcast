{"version":3,"sources":["D:\\2sxc Apps Dev\\Web\\Portals\\PodCast\\2sxc\\PodCast2/src\\styles\\_styles.scss","D:\\2sxc Apps Dev\\Web\\Portals\\PodCast\\2sxc\\PodCast2/..\\..\\..\\_default\\Skins\\2sxcBootstrap-B4\\node_modules\\bootstrap\\scss\\mixins\\_breakpoints.scss"],"names":[],"mappings":"AAEA,8BAQI,qBAVW,CAEf,gCAYI,UAdW,CAEf,sCAiBM,gBAAiB,CAjBvB,mCAqBM,eAAgB,CArBtB,+CA0BQ,MAAO,CA1Bf,+CA8BQ,cAAe,CACf,UAjCO,CAEf,2CAsCM,eAAiB,CAtCvB,oCA2CM,UAAW,CA3CjB,kDAEI,WA4CqC,CA3CrC,UA2CqC,CA1CrC,kBA0C2C,CCyB3C,4BDvEJ,kDAkDU,oBAAsB,CA8CzB,CAhGP,qFAuDY,YAAa,CAvDzB,mFA2DY,YAAa,CACb,eAAgB,CAChB,YAAa,CACb,UAAW,CA9DvB,gGAiEc,UAAW,CACX,cAAe,CAlE7B,oGAsEc,QAAS,CACT,gBAAiB,CACjB,qCAAuC,CACvC,cAAe,CAvEzB,WAyE2C,CAxE3C,UAwE2C,CAvE3C,iBAuEgD,CCJhD,4BDvEJ,oGA8EgB,QAAS,CACT,gBAAiB,CA7E7B,WA+E6C,CA9E7C,UA8E6C,CA7E7C,iBA6EkD,CAjFtD,6GAoFkB,oCAAyC,CAC1C,CArFjB,0KA4FY,YAAa,CACb,eAAiB","file":"bs4.min.css","sourcesContent":["$tertiary: #fff !default;\r\n\r\n.app-podcast2 {\r\n  @mixin sizeAndBorderRadius($size, $border-radius) {\r\n    height: $size;\r\n    width: $size;\r\n    border-radius: $border-radius;\r\n  }\r\n\r\n  .pc-bg-tertiary {\r\n    background-color: $tertiary;\r\n  }\r\n\r\n  .pc-text-tertiary {\r\n    color: $tertiary;\r\n  }\r\n\r\n  .card {\r\n    & .pc-channel-title {\r\n      font-size: 1.5rem;\r\n    }\r\n\r\n    & .pc-owner-name {\r\n      font-weight: 500;\r\n    }\r\n\r\n    & .pc-channel-category-rss {\r\n      & > p {\r\n        flex: 4;\r\n      }\r\n\r\n      & > a {\r\n        max-width: 30px;\r\n        color: $tertiary;\r\n      }\r\n    }\r\n  }\r\n\r\n  .list-group {\r\n    & .pc-episode-date {\r\n      font-size: 0.7rem;\r\n    }\r\n\r\n    /* jPlayer classes */\r\n    & .jp-audio {\r\n      width: 46px;\r\n\r\n      & .jp-interface {\r\n        @include sizeAndBorderRadius(100%, 25px);\r\n\r\n        // override element style\r\n        @include media-breakpoint-down(sm) {\r\n          width: 100% !important;\r\n        }\r\n\r\n        & .jp-controls-holder {\r\n          & .jp-play:focus {\r\n            outline: none;\r\n          }\r\n\r\n          & .jp-progress {\r\n            display: none;\r\n            flex-basis: 100%;\r\n            flex-grow: 10;\r\n            height: 4px;\r\n\r\n            & .jp-seek-bar {\r\n              height: 4px;\r\n              cursor: pointer;\r\n            }\r\n\r\n            & .pc-drag-handler {\r\n              top: -4px;\r\n              margin-left: -6px;\r\n              transition: transform 0.15s ease-in-out;\r\n              cursor: pointer;\r\n\r\n              @include sizeAndBorderRadius(12px, 6px);\r\n\r\n              @include media-breakpoint-down(sm) {\r\n                top: -6px;\r\n                margin-left: -8px;\r\n\r\n                @include sizeAndBorderRadius(16px, 8px);\r\n\r\n                &.dragging {\r\n                  box-shadow: 0 0 0 12px rgba(0, 0, 0, 0.2);\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          & .jp-current-time,\r\n          .jp-duration {\r\n            display: none;\r\n            font-size: 0.64em;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}